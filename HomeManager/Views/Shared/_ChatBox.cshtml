@using System.Security.Claims
@using System

@model HomeManager.Data.Data.ViewModels.HomeDetailsViewModel
@functions {
    string FormatTimestamp(DateTime sentAt)
    {
        var now = DateTime.Now;
        if (sentAt.Date == now.Date)
        {
            return sentAt.ToLocalTime().ToString("HH:mm");
        }
        else if (sentAt.Date == now.AddDays(-1).Date)
        {
            return $"Yesterday, {sentAt.ToLocalTime():HH:mm}";
        }
        else
        {
            return sentAt.ToLocalTime().ToString("MMM dd, HH:mm");
        }
    }
}
<style>
    #chatContainer {
        display: none;
        border: 1px solid #ccc;
        padding: 1rem;
        background: #f9f9f9;
        min-height: 200px;
        width: 300px;
    }
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 24px;
        right: 24px;
        width: 350px;
        max-width: 95vw;
        background: #fff;
        border-radius: 16px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.18);
        z-index: 1000;
        overflow: hidden;
        border: none;
    }
    .chat-header {
        position: sticky;
        top: 0;
        background: linear-gradient(90deg, #007bff 60%, #0056b3 100%);
        color: #fff;
        padding: 16px;
        font-size: 1.1em;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-radius: 16px 16px 0 0;
    }

    .chat-body {
        height: 260px;
        padding: 12px;
        background: #f6f8fa;
        overflow-y: auto;
    }

    .chat-footer {
        position: relative;
        background: #f6f8fa;
        padding: 12px;
        display: flex;
        gap: 8px;
        border-top: 1px solid #eaeaea;
    }

        .chat-footer input {
            flex: 1;
            border-radius: 8px;
            border: 1px solid #ccc;
            padding: 8px;
            font-size: 1em;
        }

        .chat-footer button {
            border-radius: 8px;
            background: #007bff;
            color: #fff;
            border: none;
            padding: 8px 16px;
            font-weight: 600;
            transition: background 0.2s;
        }

        .chat-footer button:hover {
            background: #0056b3;
        }

    .close-btn {
        background: none;
        border: none;
        color: #fff;
        font-size: 1.5em;
        cursor: pointer;
    }

    .fixed-image {
        width: 100%;
        height: 200px;
        object-fit: cover;
        border: 2px solid #ddd;
        border-radius: 8px;
        padding: 5px;
    }

    .message {
        display: flex;
        align-items: flex-end;
        margin-bottom: 10px;
    }

        .message.self {
            justify-content: flex-end;
        }


        .message.other {
            justify-content: flex-start;
        }


    .message-bubble {
        max-width: 75%;
        padding: 12px 16px;
        border-radius: 12px;
        background: #e3f2fd;
        color: #222;
        position: relative;
        font-size: 1em;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        border: 1px solid #c4b5fd;
    }


    .message.self .message-bubble {

        background: linear-gradient(90deg, #4e54c8 0%, #8f94fb 100%);
        color: #fff;
        border: 1px solid #4e54c8;
    }


    .message-author {
        font-weight: 600;
        margin-bottom: 2px;
        font-size: 0.95em;
        color: #4e54c8;
        display: block;
    }


    .message.self .message-author {
        color: #fff;
    }


    .message-timestamp {
        font-size: 0.8em;
        color: #6d28d9;
        margin-left: 8px;
        margin-top: 2px;
        display: inline-block;
        font-weight: 500;
    }


    .message.self .message-timestamp {
        color: #e0e7ff;
    }


    .message-status {
        font-size: 0.95em;
        font-weight: bold;
        text-align: right;
        margin-top: 2px;
        padding: 2px 0;
        color: gray; 
    }


    .status-text {
        font-weight: bold;
        padding: 0 4px;
        background: none;
        color: inherit;
        border-radius: 0;
        transition: none;
    }
    .status-text[data-status] {
        background: none;
        color: inherit;
    }


    #imageModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: rgba(0,0,0,0.8);
        z-index: 2000;
        align-items: center;
        justify-content: center;
        /* Use flex for centering */
        display: flex;
    }
    #imageModal[style*="display: none"] {
        display: none !important;
    }
    #modalImage {
        max-width: 90vw;
        max-height: 90vh;
        transition: transform 0.3s;
        cursor: zoom-in;
        border-radius: 12px;
    }
</style>

<div id="chatPopup" class="chat-popup">
    <div class="chat-header">
        <span>Chat with @Model.OtherParticipantName</span>
        <button id="closeChatBtn" class="close-btn">&times;</button>
        
    </div>
    <div class="chat-body" id="messagesList">
        @if (Model.Messages != null)
        {
            foreach (var msg in Model.Messages)
            {
                var isSelf = msg.SenderId.ToString() == User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                <div class="message @(isSelf ? "self" : "other")">
                    <div class="message-bubble">
                        <span class="message-author">@((isSelf ? "You" : Model.OtherParticipantName))</span>
                        <span class="message-timestamp">
                           @FormatTimestamp(msg.SentAt)
                        </span>
                        <br />
                        @if (!string.IsNullOrEmpty(msg.ImageUrl))
                        {
                            <img src="@msg.ImageUrl" class="chat-image zoomable-image" alt="Sent image"
     style="max-width:180px;max-height:180px;cursor:zoom-in;border-radius:8px;margin:6px 0;" />
                        }
                        else
                        {
                            <pre>@Html.Raw(System.Net.WebUtility.HtmlEncode(EnsureZoomableClass(msg.Content)))</pre>
                        }
                        
                        <span class="message-status">
                            <span class="status-text status-text-@msg.Id" data-status="@msg.MessageStatus.ToString()">
    [@msg.MessageStatus]
</span>
                        </span>
                    </div>
                    
                </div>
            }
        }
        
    </div>
    <div id="typingIndicator" style="font-size:0.9em;color:#a21caf;margin:4px 0 0 8px;display:none;">
        @Model.OtherParticipantName is typing...
    </div>
    <div class="chat-footer" style="position:relative;">
        <button type="button" class="btn-hm" id="menuBtn">&#8942;</button>
        <div id="chatMenu" style="display:none;position:absolute;bottom:56px;right:0;background:#fff;border-radius:12px;box-shadow:0 2px 8px #a21caf22;padding:12px;z-index:1100;">
            <button type="button" class="btn-hm" id="emojiBtn">&#128515; Emoji</button>
            <emoji-picker id="emojiPicker" style="display:none;"></emoji-picker>
            <input type="file" id="fileInput" class="form-control" style="max-width:120px;" accept="image/*" />
        </div>
        <input type="text" id="messageInput" placeholder="Type a message..." autocomplete="off" />
        <input type="hidden" id="senderId" value='@User.FindFirst(ClaimTypes.NameIdentifier)?.Value' />
        @if (Model.Conversation != null)
        {
            <input type="hidden" id="conversationId" value="@Model.Conversation.Id" />
        }
        <button class="btn-hm" onclick="sendMessage()">Send</button>
    </div>
</div>

@functions {
    public static string EnsureZoomableClass(string html)
    {
        if (string.IsNullOrEmpty(html)) return html;
        // Match <img ...> tags, regardless of attribute order or quote style
        return System.Text.RegularExpressions.Regex.Replace(
            html,
            @"<img\b([^>]*)(?<!/)>",
            m =>
            {
                var tag = m.Value;
                // If already has zoomable-image, return as is
                if (tag.Contains("zoomable-image")) return tag;

                // Add zoomable-image to class attribute, or add class if missing
                if (tag.Contains("class=\""))
                    tag = System.Text.RegularExpressions.Regex.Replace(tag, @"class=""([^""]*)""", @"class=""$1 zoomable-image""");
                else if (tag.Contains("class='"))
                    tag = System.Text.RegularExpressions.Regex.Replace(tag, @"class='([^']*)'", @"class='$1 zoomable-image'");
                else
                    tag = tag.Replace("<img", "<img class=\"zoomable-image\"");

                return tag;
            },
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );
    }
}

@* <div id="imageModal" style="display:none;position:fixed;top:0;left:0;width:100vw;height:100vh;background:rgba(0,0,0,0.8);z-index:2000;align-items:center;justify-content:center;">
    <span style="position:absolute;top:24px;right:32px;font-size:2em;color:#fff;cursor:pointer;" onclick="closeImageModal()">&times;</span
    <img id="modalImage" src="" style="max-width:90vw;max-height:90vh;transition:transform 0.3s;cursor:zoom-in;border-radius:12px;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%) scale(1);" onclick="toggleZoom()" />
    <script>
        function openImageModal(src) {
            const modal = document.getElementById("imageModal");
            const modalImg = document.getElementById("modalImage");
            modalImg.src = src;
            modalImg.style.transform = "translate(-50%,-50%) scale(1)";
            modal.style.display = "flex";
        }
        function closeImageModal() {
            document.getElementById("imageModal").style.display = "none";
        }
        function toggleZoom() {
            const modalImg = document.getElementById("modalImage");
            if (modalImg.style.transform.includes("scale(1)")) {
                modalImg.style.transform = "translate(-50%,-50%) scale(2.2)";
            } else {
                modalImg.style.transform = "translate(-50%,-50%) scale(1)";
            }
        }
        window.openImageModal = openImageModal;
        window.closeImageModal = closeImageModal;
        window.toggleZoom = toggleZoom;
    </script>
</div> *@
@section Scripts {
    @* <script src="~/js/chatbox.js"></script> *@
    
    
}


