@using HomeManager.Data.Data.ViewModels
@model ConversationDetailsViewModel

<h2>Chat with @Model.OtherParticipantName</h2>

<div id="messagesList" style="border: 1px solid #ccc; padding: 10px; max-height: 400px; overflow-y: auto;">
    @foreach (var message in Model.Messages)
    {
        <div class="message-item @(message.SenderId == Model.CurrentUserId ? "self" : "other")">
            <strong>@(message.SenderId == Model.CurrentUserId ? "You" : @Model.OtherParticipantName):</strong>
            @message.Content
            <br /><small>@message.SentAt.ToString("g")</small>
        </div>
    }
</div>

<div>
    <input type="text" id="messageInput" placeholder="Type your message here..." />
    <button onclick="sendMessage()" class="btn btn-hm">Send</button>
</div>

<!-- Hidden fields for real-time updates -->
<input type="hidden" id="conversationId" value="@Model.ConversationId" />
<input type="hidden" id="senderId" value="@Model.CurrentUserId" />

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        // SignalR and chat logic
        // let connection = new signalR.HubConnectionBuilder()
        //     .withUrl("/hubs/chat")
        //     .configureLogging(signalR.LogLevel.Information)
        //     .build();

        // async function startConnection() {
        //     try {
        //         await connection.start();
        //         console.log("SignalR connected");
        //         await connection.invoke("JoinConversationGroup", conversationId);
        //         markAsSeen();
        //     } catch (err) {
        //         console.error("Connection failed, retrying in 5s", err);
        //         setTimeout(startConnection, 5000);
        //     }
        // }

        // // function joinGroup() {
        // //     const conversationId = document.getElementById("conversationId").value;
        // //     connection.invoke("JoinGroup", conversationId)
        // //         .then(() => console.log("Joined group", conversationId))
        // //         .catch(err => console.error("Error joining group:", err));
        // // }

        // function markAsSeen() {
        //     const conversationId = document.getElementById("conversationId").value;
        //     connection.invoke("MarkAsSeen", conversationId)
        //         .catch(err => console.error("Error marking messages as seen:", err));
        // }

        // function sendMessage() {
        //     const msg = document.getElementById("messageInput").value;
        //     const conversationId = document.getElementById("conversationId").value;
        //     const senderId = document.getElementById("senderId").value;
        //     if (!msg || !conversationId || !senderId) {
        //         return;
        //     }
        //     const tempId = "msg_" + Date.now();

        //     const messageDto = {
        //         conversationId: conversationId,
        //         senderId: senderId,
        //         content: msg,
        //         sentAt: new Date().toISOString(),
        //         status: 0,
        //         tempId: tempId
        //     };

        //     // Immediately show the sent message in the UI
        //     const li = document.createElement("div");
        //     li.id = tempId;
        //     li.innerHTML = `<strong>You:</strong> ${msg} <span class="status-text status-text-${tempId}" style="font-size:0.8em; color: gray;">[Pending]</span>`;
        //     document.getElementById("messagesList").appendChild(li);
        //     document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;

        //     connection.invoke("SendMessage", messageDto)
        //         .then(() => console.log("Message sent"))
        //         .catch(err => console.error("Error sending message:", err));

        //     document.getElementById("messageInput").value = "";
        // }

        // connection.on("ReceiveMessage", (message) => {
        //     // Append the incoming message to the messages list
        //     const li = document.createElement("div");
        //     const isSelf = message.senderId === document.getElementById("senderId").value;
        //     li.innerHTML = `<strong>${isSelf ? "You" : "@Model.OtherParticipantName"}:</strong> ${message.content}
        //                 <br><small>${message.sentAt}</small>`;
        //     document.getElementById("messagesList").appendChild(li);
        //     document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;
        // });

        // startConnection();

    //     async function startConnection() {
    //         try {
    //             await connection.start();
    //             console.log("SignalR connected");
    //         } catch (err) {
    //             console.error("Connection failed, retrying in 5s", err);
    //             setTimeout(startConnection, 5000);
    //         }
    //     }
    //     let connection = new signalR.HubConnectionBuilder()
    //         .withUrl("/hubs/chat")
    //         .configureLogging(signalR.LogLevel.Information)
    //         .build();

    //     const currentUserId = "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
    //     const senderIdInput = document.getElementById("senderId");
    //     if (senderIdInput) {
    //         senderIdInput.value = currentUserId;
    //     }

    //     async function prepareChat(homeId) {

    //         const res = await fetch(`/Chat/ForHome/${homeId}`, {
    //             credentials: 'include'
    //         });

    //         if (!res.ok) {
    //             const errorText = await res.text();
    //             alert("Error: " + errorText);
    //             return;
    //         }

    //         const data = await res.json();
    //         const conversationId = data.conversationId;

    //         const messagesRes = await fetch(`/Chat/Messages?conversationId=${conversationId}`);

    //         if (!messagesRes.ok) {
    //             const errorText = await messagesRes.text();
    //             console.error("Failed to get messages:", errorText);
    //             return;
    //         }

    //         let messages;
    //         try {
    //             messages = await messagesRes.json();
    //         } catch (err) {
    //             console.error("Failed to parse JSON:", err);
    //             return;
    //         }

    //         if (!Array.isArray(messages)) {
    //             console.error("Expected array of messages but got:", messages);
    //             return;
    //         }

    //         document.getElementById("conversationId").value = conversationId;

    //         if (connection.state === "Connected") {
    //             try {
    //                 // Ensure you use the same method name as defined in your hub.
    //                 await connection.invoke("JoinConversationGroup", conversationId);
    //                 console.log("Joined SignalR group for conversation:", conversationId);
    //             } catch (err) {
    //                 console.error("Failed to join SignalR group:", err);
    //             }
    //         }

    //         const list = document.getElementById("messagesList");
    //         list.innerHTML = "";
    //         document.getElementById("chatBox").style.display = "block";

    //         messages.forEach(msg => {
    //             const isSelf = msg.senderId === currentUserId;
    //             const li = document.createElement("div");
    //             li.classList.add("message", isSelf ? "self" : "other");

    //             const displayName = isSelf ? "You" : (msg.senderName ? msg.senderName : "Dealer");

    //             li.innerHTML = `
    //                     <div class="message-bubble">
    //                         <div class="message-author">${displayName}:</div>
    //                         <div class="message-content">${msg.content}</div>
    //                         <div class="message-status">[${getMessageStatusText(msg.status)}]</div>
    //                     </div>
    //                 `;
    //             document.getElementById("messagesList").appendChild(li);
    //         });

    //         await connection.invoke("MarkAsSeen", conversationId);
    //     }

    //     function getMessageStatusText(messageStatus) {
    //         const num = parseInt(messageStatus ?? 0);

    //         switch (num) {
    //             case 0: return "Pending";
    //             case 1: return "Sent";
    //             case 2: return "Delivered";
    //             case 3: return "Seen";
    //             case 4: return "Failed";
    //             default: return `Unknown (${messageStatus})`;
    //         }
    //     }


    //     document.getElementById("openChatBtn").addEventListener("click", async () => {
    //         await prepareChat("Model.Home.Id");
    //     });

    //     document.getElementById("closeChatBtn").addEventListener("click", () => {
    //         document.getElementById("chatBox").style.display = "none";
    //     });

    //     function sendMessage() {
    //         const msg = document.getElementById("messageInput").value;
    //         const conversationId = document.getElementById("conversationId")?.value;

    //         if (!msg || !conversationId || !currentUserId) {
    //             console.error("Missing fields for message sending.");
    //             return;
    //         }

    //         const tempId = "msg_" + Date.now();

    //         const messageDto = {
    //             conversationId: conversationId,
    //             senderId: currentUserId,
    //             content: msg,
    //             sentAt: new Date().toISOString(),
    //             status: 0,
    //             tempId: tempId
    //         };

    //         const li = document.createElement("div");
    //         li.id = tempId;
    //         li.dataset.content = msg;
    //         li.dataset.temp = "true";
    //         li.innerHTML = `<strong>You:</strong> ${msg} <span class="status-text status-text-${tempId}" style="font-size:0.8em; color: gray;">[${getMessageStatusText(0)}]</span>`;
    //         document.getElementById("messagesList").appendChild(li);
    //         document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;

    //         connection.invoke("SendMessage", messageDto)
    //             .then(() => console.log("Message sent"))
    //             .catch(err => console.error("SignalR SendMessage failed:", err));

    //         document.getElementById("messageInput").value = "";
    //     }

    //     connection.on("ReceiveMessage", async (message) => {
    //         const isSelf = message.senderId === currentUserId;
    //         const li = document.createElement("div");
    //         console.log("Message Received");
    //         li.classList.add("message", isSelf ? "self" : "other");
    //         const displayName = isSelf ? "You" : (message.senderName ? message.senderName : "Dealer");
    //         if (isSelf && message.tempId) {
    //             const tempEl = document.getElementById(message.tempId);

    //             if (tempEl) {
    //                 const statusEl = tempEl.querySelector("span.status-text");
    //                 if (statusEl) {
    //                     statusEl.className = `status-text status-text-${message.messageId}`;
    //                     statusEl.textContent = `[${getMessageStatusText(message.messageStatus)}]`;
    //                 }

    //                 tempEl.dataset.temp = "false";
    //                 tempEl.id = message.messageId;
    //                 return;
    //             }
    //         }



    //         li.innerHTML = `
    //                             <div class="message-bubble">
    //                                 <div class="message-author">${displayName}:</div>
    //                                 <div class="message-content">${message.content}</div>
    //                                 <div class="message-status">[${getMessageStatusText(isSelf ? message.status : message.status)}]</div>
    //                             </div>
    //                         `;
    //         document.getElementById("messagesList").appendChild(li);
    //         document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;

    //         if (!isSelf) {
    //             try {
    //                 await connection.invoke("MarkAsDelivered", message.messageId);
    //             } catch (err) {
    //                 console.error("Failed to mark as delivered", err);
    //             }
    //         }
    //     });

    //     connection.on("ReceiveMessageStatusUpdate", (data) => {
    //         const statusEl = document.querySelector(`.status-text-${data.messageId}`);
    //         if (statusEl) {
    //             statusEl.textContent = `[${getMessageStatusText(data.status)}]`;
    //         }
    //     });

    //     connection.onreconnected(async () => {
    //         const conversationId = document.getElementById("conversationId")?.value;
    //         if (conversationId) {
    //             try {
    //                 await connection.invoke("JoinConversationGroup", conversationId);
    //                 console.log("Re-joined group after reconnect:", conversationId);
    //             } catch (err) {
    //                 console.error("Failed to re-join group:", err);
    //             }
    //         }
    //     });

    //     startConnection();
    // </script>
}


