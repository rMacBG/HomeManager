@using HomeManager.Data.Data.ViewModels
@model IEnumerable<ConversationListItemViewModel>

<h2>My Chats</h2>

@if (!Model.Any())
{
    <p>You do not have any active conversations.</p>
}
else
{
    <div id="chatListContainer">
        @await Html.PartialAsync("_ChatListPartial", Model)
        @* <ul class="conversation-list">
            @foreach (var conversation in Model)
            {
                <li class="conversation-item d-flex align-items-center mb-3">
                    <img src="@conversation.HomeImageUrl" class="home-avatar me-2" alt="Home" style="width:48px;height:48px;border-radius:8px;object-fit:cover;" />
                    <div class="flex-grow-1">
                        <strong>@conversation.HomeName</strong>
                        <div>
                            <span class="other-participant text-muted">@conversation.OtherParticipantName</span>
                            <span class="chat-date text-secondary ms-2">@conversation.CreatedAt.ToString("g")</span>
                            @if (conversation.UnreadCount > 0)
                            {
                                <span class="badge bg-danger ms-2">@conversation.UnreadCount</span>
                            }
                        </div>
                        <span class="last-message text-truncate d-block mt-1 text-secondary" style="max-width: 300px;">
                            @{
                                var preview = conversation.LastMessagePreview;
                                if (preview != null && preview.Contains("<img"))
                                {
                                    preview = $"{conversation.OtherParticipantName} sent a picture";
                                }
                            }
                            @preview
                        </span>
                    </div>
                    <a href="javascript:void(0);" data-conversation-id="@conversation.ConversationId" class="open-chat-link btn btn-sm btn-primary ms-2">Open Chat</a>
                </li>
            }
        </ul> *@
    </div>
}

<div id="chatBoxContainer"></div>

@section Scripts {
    <script>
        function attachChatListHandlers() {
            document.querySelectorAll(".open-chat-link").forEach(function (link) {
                link.onclick = null; // Remove any previous handler
                link.addEventListener("click", async function () {
                    const conversationId = this.dataset.conversationId;

                    // Remove unread badge immediately
                    const parentLi = this.closest(".conversation-item");
                    if (parentLi) {
                        const badge = parentLi.querySelector(".badge.bg-danger");
                        if (badge) badge.remove();
                    }

                    fetch(`/Chat/ChatBoxPartial?conversationId=${conversationId}`)
                        .then(response => {
                            if (!response.ok) throw new Error("Failed to load chat box.");
                            return response.text();
                        })
                        .then(html => {
                            document.getElementById("chatBoxContainer").innerHTML = "";
                            document.getElementById("chatBoxContainer").innerHTML = html;
                            window.observeChatBox && window.observeChatBox();
                            setupChatFeatureEvents();
                            if (window.prepareChatBox) window.prepareChatBox();
                        })
                        .catch(err => {
                            alert("Could not load chat: " + err);
                        });
                });
            });
        }
        window.attachChatListHandlers = attachChatListHandlers;

        document.addEventListener("DOMContentLoaded", function () {
            attachChatListHandlers();

            if (window.connection && window.connection.state === "Connected") {
                document.querySelectorAll(".open-chat-link[data-conversation-id]").forEach(function (link) {
                    const conversationId = link.dataset.conversationId;
                    if (conversationId) {
                        window.connection.invoke("JoinConversationGroup", conversationId);
                    }
                });
            } else if (window.connection) {
                window.connection.start().then(function () {
                    document.querySelectorAll(".open-chat-link[data-conversation-id]").forEach(function (link) {
                        const conversationId = link.dataset.conversationId;
                        if (conversationId) {
                            window.connection.invoke("JoinConversationGroup", conversationId);
                        }
                    });
                });
            }
        });
    </script>
}
