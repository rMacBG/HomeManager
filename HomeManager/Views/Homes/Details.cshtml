@using System.Security.Claims
@model HomeManager.Data.Data.ViewModels.HomeDetailsViewModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

<div class="card shadow-lg mb-4" style="border-radius:16px;">
    <div class="card-body">
        <div class="d-flex align-items-center mb-3">
            @{
                var ownerAvatar = Url.Content(Model.LandlordAvatarUrl);
            }
            <img src="@ownerAvatar" class="rounded-circle me-3" style="width:48px;height:48px;object-fit:cover;border:2px solid #8f94fb;" alt="Dealer Avatar" />
            <div>
                <h2 class="card-title text-primary mb-0">@Model.Home.HomeName</h2>
                <div class="text-muted">
                    <span class="fw-bold">@Model.OwnerName</span>
                    <span class="ms-2"><i class="fa fa-phone text-success"></i> @Model.DealerPhone</span>
                    <a asp-controller="User" asp-action="Profile" asp-route-id="@Model.Home.LandlordId"
                       class="btn btn-sm btn-outline-primary ms-3" style="vertical-align:middle;">
                        <i class="fa fa-user"></i> Go to profile
                    </a>
                </div>
            </div>
        </div>
        <div class="mb-3 p-3" style="background:linear-gradient(90deg,#f3e8ff 0%,#e0e7ff 100%);border-radius:12px;">
            <h5 class="mb-2" style="color:#6d28d9;"><i class="fa fa-info-circle me-2"></i>Description</h5>
            <p class="mb-0" style="font-size:1.1em;">@Model.Home.HomeDescription</p>
        </div>
        <div class="row mb-2">
            <div class="col-md-6 mb-2">
                <span class="badge bg-primary"><i class="fa fa-map-marker-alt me-1"></i> @Model.Home.HomeLocation</span>
            </div>
            <div class="col-md-3 mb-2">
                <span class="badge bg-info text-dark"><i class="fa fa-globe me-1"></i> @Model.Home.Region</span>
            </div>
            <div class="col-md-3 mb-2">
                <span class="badge bg-secondary"><i class="fa fa-city me-1"></i> @Model.Home.City</span>
            </div>
        </div>
        <div class="row mb-2">
            <div class="col-md-6 mb-2">
                <span class="badge bg-success"><i class="fa fa-home me-1"></i> @Model.Home.HomeDealType</span>
            </div>
            <div class="col-md-6 mb-2">
                <span class="badge bg-warning text-dark fw-bold"><i class="fa fa-tag me-1"></i> @Model.Home.HomePrice.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"))</span>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 0;
        right: 20px;
        width: 300px;
        background: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0,0,0,.3);
        z-index: 1000;
        border-radius: 10px;
    }

    .chat-header {
        padding: 10px;
        background: #007bff;
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

    .chat-body {
        height: 200px;
        padding: 10px;
        background: #f9f9f9;
    }

    .chat-footer {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        gap: 5px;
    }

        .chat-footer input {
            flex: 1;
            padding: 5px;
        }

        .chat-footer button {
            padding: 5px 10px;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }

    .fixed-image {
        width: 100%;
        height: 200px; 
        object-fit: cover;
        border: 2px solid #ddd; 
        border-radius: 8px; 
        padding: 5px;
    }

    .message {
        margin: 10px;
        display: flex;
    }

        .message.self {
            justify-content: flex-end;
        }

        
        .message.other {
            justify-content: flex-start;
        }

   
        max-width: 70%;
        padding: 10px;
        border-radius: 8px;
        background-color: #f1f0f0;
        position: relative;
    }

   
    .message.self .message-bubble {
        background-color: #4aef0a;
    }

   
    .message-author {
        font-weight: bold;
        margin-bottom: 3px;
    }

   
    .message-content {
        margin-bottom: 2px;
    }

    .message-status {
        font-size: 0.8em;
        color: gray;
        text-align: right;
    }

    .fade-on-hover {
        transition: transform 0.3s;
    }

    .fade-on-hover:hover {
        transform: scale(1.05);
    }

    .gallery-zoomable-image {
        transition: transform 0.3s;
        transform: scale(1);
    }

    .gallery-zoomable-image:hover {
        transform: scale(1.2);
    }

    .gallery-zoomable-image.zoomed {    
        z-index: 1000;
    }
</style>
@{
    var lat = Model.Home.Latitude;
    var lng = Model.Home.Longitude;
    var hasCoords = lat != 0 && lng != 0;
   
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    var ownerId = Model.Home.LandlordId.ToString();

}
@if (hasCoords)
{
    
    <div id="detailsMap" style="height:400px;width:100%;"></div>
    
    <script>
        console.log("Loading map with coordinates:", @lat, @lng);
        function initDetailsMap() {
            var map = new google.maps.Map(document.getElementById('detailsMap'), {
                center: { lat: @lat, lng: @lng },
                zoom: 15
            });
            new google.maps.Marker({
                position: { lat: @lat, lng: @lng },
                map: map,
                title: "@Model.Home.HomeName"
            });
        }
        window.initDetailsMap = initDetailsMap;
    </script>
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAJ9L4-eFlTuD7QWvoLbEkUb6d0LA6Bmmk&callback=initDetailsMap" async defer></script>
}
else
{
    <script>
    {
        console.log("No valid coordinates, using address:", "@Model.Home.HomeLocation");
    }
    </script>
    <iframe
        width="600"
        height="450"
        style="border:0"
        loading="lazy"
        allowfullscreen
        referrerpolicy="no-referrer-when-downgrade"
            src="https://www.google.com/maps/embed/v1/place?key=AIzaSyAJ9L4-eFlTuD7QWvoLbEkUb6d0LA6Bmmk&q=@Model.Home.HomeLocation">
    </iframe>
}
<div class="row g-1 mb-4">
    @if (Model.Home.Images?.Any() == true)
    {
        var imgIndex = 0;
        foreach (var image in Model.Home.Images)
        {
            <div class="col-md-4">
                <a href="#" data-bs-toggle="modal" data-bs-target="@("#imgModal" + imgIndex)">
                    <img src="@image.FilePath" class="img-fluid rounded shadow fade-on-hover" alt="Home Image" style="border:2px solid #eee;" />
                </a>
                
                <div class="modal fade" id="@("imgModal" + imgIndex)" tabindex="-1" aria-labelledby="@("imgModalLabel" + imgIndex)" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered modal-lg">
                        <div class="modal-content bg-transparent border-0">
                            <div class="modal-body text-center p-0">
                                <img src="@image.FilePath" alt="Home Image" class="img-fluid gallery-zoomable-image" style="max-width:100%;max-height:80vh;border-radius:12px;cursor:zoom-in;" @* onclick="this.classList.toggle('zoomed')" *@/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            imgIndex++;
        }
    }
    else
    {
        <p>No images available for this home.</p>
    }
</div>
@* <p>User ID Test: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
<p>Is Authenticated: @User.Identity.IsAuthenticated</p>
<p>Debug ConversationId: @if (Model.Conversation != null)
    {
    <p> @Model.Conversation.Id</p>
    }
    else
    {
    <p>No conversation found.</p>
    } </p> *@

    @await Html.PartialAsync("_ChatBox", Model)

@if (User.Identity.IsAuthenticated && currentUserId == ownerId)
{
    
    <div  class="btn btn-primary mt-3">You cannot chat with yourself sorry</div>
}
else if (User.Identity.IsAuthenticated)
{
    <button id="openChatBtn" data-home-id="@Model.Home.Id" class="btn btn-primary mt-3">Ask the Dealer</button>
}
else
{
    <button id="askDealerGuestBtn" class="btn btn-primary mt-3" type="button" data-bs-toggle="modal" data-bs-target="#registerModal">
        Ask the Dealer
    </button>
    <div id="registerModal" class="modal fade" tabindex="-1" aria-labelledby="registerModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="registerModalLabel">Register to Chat</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>You need to register or log in to chat with the dealer.</p>
                </div>
                <div class="modal-footer">
                    <button id="registerBtn" class="btn btn-primary">Register</button>
                    <button id="loginBtn" class="btn btn-secondary">Login</button>
                </div>
            </div>
        </div>
    </div>
}

<div id="chatBoxContainer"></div>

@if (Model.Ratings.Any())
{
    <div class="mb-4">
        <h5>Ratings & Comments</h5>
        @foreach (var rating in Model.Ratings.OrderByDescending(r => r.CreatedAt))
        {
            <div class="border rounded p-2 mb-2">
                <div>
                    <strong>
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span class="fa fa-star @(i <= rating.Value ? "checked" : "")"></span>
                        }
                        @rating.Value/5
                    </strong>
                    <span class="text-muted" style="font-size:0.9em;">
                        @rating.CreatedAt.ToShortDateString()
                    </span>
                </div>
                @if (!string.IsNullOrWhiteSpace(rating.Comment))
                {
                    <div class="mt-1">@rating.Comment</div>
                }
            </div>
        }
    </div>
}
else
{
    <div class="mb-4 text-muted">No ratings yet.</div>
}

@if (User.Identity.IsAuthenticated)
{
    <form method="post" asp-action="AddRating" asp-controller="Homes">
        <input type="hidden" name="homeId" value="@Model.Home.Id" />
        <div class="mb-2">
            <label>Rate this home:</label>
            <select name="ratingValue" class="form-select" required>
                @for (int i = 1; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="mb-2">
            <label>Comment (optional):</label>
            <textarea name="comment" class="form-control" maxlength="750"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit Rating</button>
    </form>
}

@section Scripts {
     

    <script>
    document.getElementById("openChatBtn").addEventListener("click", function () {
        const homeId = this.getAttribute("data-home-id");
        fetch(`/Homes/ChatBoxPartial?homeId=${homeId}`)
            .then(response => {
                if (!response.ok) throw new Error("Failed to load chat box.");
                return response.text();
            })
            .then(html => {
                document.getElementById("chatBoxContainer").innerHTML = html;
                    console.log(document.getElementById("senderId"))
                if (window.setupChatFeatureEvents) window.setupChatFeatureEvents();
                if (window.prepareChatBox) window.prepareChatBox();
            })
            .catch(err => {
                alert("Could not load chat: " + err);
            });
    });
</script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.getElementById("registerBtn")?.addEventListener("click", function () {
                window.location.href = '@Url.Action("Register", "Auth")';
            });
            document.getElementById("loginBtn")?.addEventListener("click", function () {
                window.location.href = '@Url.Action("Login", "Auth")';
            });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('.gallery-zoomable-image').forEach(function(img) {
                let isZoomed = false;
                let isDragging = false;
                let startX = 0, startY = 0, lastX = 0, lastY = 0;

                img.addEventListener("click", function (e) {
                    // Only zoom if not dragging
                    if (!isDragging) {
                        isZoomed = !isZoomed;
                        if (isZoomed) {
                            img.classList.add("zoomed");
                            img.style.cursor = "grab";
                            img.style.transition = "transform 0.3s";
                            img.style.transform = `scale(3)`;
                            lastX = 0; lastY = 0;
                        } else {
                            img.classList.remove("zoomed");
                            img.style.cursor = "zoom-in";
                            img.style.transform = "scale(1)";
                            lastX = 0; lastY = 0;
                        }
                    }
                });

                img.addEventListener("mousedown", function (e) {
                    if (img.classList.contains("zoomed")) {
                        isDragging = true;
                        startX = e.clientX - lastX;
                        startY = e.clientY - lastY;
                        img.style.cursor = "grabbing";
                        e.preventDefault();
                    }
                });

                document.addEventListener("mousemove", function (e) {
                    if (isDragging && img.classList.contains("zoomed")) {
                        lastX = e.clientX - startX;
                        lastY = e.clientY - startY;
                        img.style.transform = `scale(3) translate(${lastX / 3}px, ${lastY / 3}px)`;
                    }
                });

                document.addEventListener("mouseup", function () {
                    if (isDragging) {
                        isDragging = false;
                        if (img.classList.contains("zoomed")) {
                            img.style.cursor = "grab";
                        }
                    }
                });

                // Optional: Reset pan when modal closes
                img.closest('.modal')?.addEventListener('hidden.bs.modal', function () {
                    img.classList.remove("zoomed");
                    img.style.cursor = "zoom-in";
                    img.style.transform = "scale(1)";
                    lastX = 0; lastY = 0;
                    isZoomed = false;
                });
            });
        });
    </script>

}



@if (User.Identity.IsAuthenticated && currentUserId == ownerId)
{
    <a asp-action="Edit" asp-route-id="@Model.Home.Id" class="btn btn-warning mt-3">Edit Estate</a>
}