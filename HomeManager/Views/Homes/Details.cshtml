@model HomeManager.Data.Data.Dtos.HomeDto
<h2>@Model.HomeName</h2>
<p>@Model.HomeDescription</p>
<p>Location: @Model.HomeLocation</p>
<style>
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 0;
        right: 20px;
        width: 300px;
        background: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0,0,0,.3);
        z-index: 1000;
        border-radius: 10px;
    }

    .chat-header {
        padding: 10px;
        background: #007bff;
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

    .chat-body {
        height: 200px;
        padding: 10px;
        background: #f9f9f9;
    }

    .chat-footer {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        gap: 5px;
    }

        .chat-footer input {
            flex: 1;
            padding: 5px;
        }

        .chat-footer button {
            padding: 5px 10px;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }
</style>
<!-- Embed Google Maps -->
<iframe
    width="600"
    height="450"
    style="border:0"
    loading="lazy"
    allowfullscreen
    referrerpolicy="no-referrer-when-downgrade"
    src="https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=@Model.HomeLocation">
</iframe>

<button id="openChatBtn" class="btn btn-primary mt-3">Ask the Dealer</button>
<div id="chatSection">
    
    <div id="chatBox" class="chat-popup">
        <div class="chat-header">
            <span>Chat with Dealer</span>
            <button id="closeChatBtn" class="close-btn">&times;</button>
        </div>
        <div class="chat-body" id="messagesList" style="overflow-y:auto;"></div>
        <div class="chat-footer">
            <input type="hidden" id="senderId" value="@User.FindFirst("nameidentifier")?.Value" />
            <input type="hidden" id="conversationId" />
            <input type="text" id="messageInput" placeholder="Type a message..." />
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR connected");
            } catch (err) {
                console.error("Connection failed, retrying in 5s", err);
                setTimeout(startConnection, 5000);
            }
        }

        // Call this when opening chat
        async function prepareChat(homeId) {
            try {
                const res = await fetch(`/api/conversations/for-home/${homeId}`);
                const data = await res.json();
                document.getElementById("conversationId").value = data.conversationId;
                document.getElementById("chatBox").style.display = "block";
            } catch (err) {
                console.error("Failed to fetch conversationId:", err);
            }
        }

        
        document.getElementById("openChatBtn").addEventListener("click", () => {
            prepareChat("@Model.Id");
            document.getElementById("chatBox").style.display = "block";
        });

        document.getElementById("closeChatBtn").addEventListener("click", () => {
            document.getElementById("chatBox").style.display = "none";
        });

        function sendMessage() {
            const msg = document.getElementById("messageInput").value;
            const senderId = document.getElementById("senderId")?.value;
            const conversationId = document.getElementById("conversationId")?.value;

            if (!msg || !senderId || !conversationId) {
                console.error("Missing fields for message sending.");
                return;
            }

            const messageDto = {
                conversationId: conversationId,
                senderId: senderId,
                content: msg,
                sentAt: new Date().toISOString(),
                status: 0
            };

            connection.invoke("SendMessage", messageDto)
                .then(() => console.log("Message sent"))
                .catch(err => console.error("SignalR SendMessage failed:", err));

            document.getElementById("messageInput").value = "";
        }

        connection.on("ReceiveMessage", (user, message) => {
            const li = document.createElement("div");
            li.textContent = `${user}: ${message}`;
            const list = document.getElementById("messagesList");
            list.appendChild(li);
            list.scrollTop = list.scrollHeight;
        });

        startConnection();
    </script>
}
