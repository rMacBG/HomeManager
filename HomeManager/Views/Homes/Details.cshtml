@using System.Security.Claims
@model HomeManager.Data.Data.Dtos.HomeDto
<h2>@Model.HomeName</h2>
<p>@Model.HomeDescription</p>
<p>Location: @Model.HomeLocation</p>
<style>
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 0;
        right: 20px;
        width: 300px;
        background: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0,0,0,.3);
        z-index: 1000;
        border-radius: 10px;
    }

    .chat-header {
        padding: 10px;
        background: #007bff;
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

    .chat-body {
        height: 200px;
        padding: 10px;
        background: #f9f9f9;
    }

    .chat-footer {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        gap: 5px;
    }

        .chat-footer input {
            flex: 1;
            padding: 5px;
        }

        .chat-footer button {
            padding: 5px 10px;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }
</style>
<!-- Embed Google Maps -->
<iframe
    width="600"
    height="450"
    style="border:0"
    loading="lazy"
    allowfullscreen
    referrerpolicy="no-referrer-when-downgrade"
    src="https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=@Model.HomeLocation">
</iframe>
<p>User ID Test: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
<p>Is Authenticated: @User.Identity.IsAuthenticated</p>
<button id="openChatBtn" class="btn btn-primary mt-3">Ask the Dealer</button>
<div id="chatSection">
    
    <div id="chatBox" class="chat-popup">
        <div class="chat-header">
            <span>Chat with Dealer</span>
            <p>Debug UserId: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
            <button id="closeChatBtn" class="close-btn">&times;</button>
        </div>
        <div class="chat-body" id="messagesList" style="overflow-y:auto;"></div>
        <div class="chat-footer">
            <br />
            
            <input type="text" id="messageInput" placeholder="Type a message..." />
            <input type="hidden" id="senderId" value='@User.FindFirst(ClaimTypes.NameIdentifier)?.Value' />
            <input type="hidden" id="conversationId" />

            <button onclick="sendMessage()">Send</button>
            @* <form id="sendMessageForm">
        <input type="hidden" id="conversationId" value="@Model.Id" />
        <input type="hidden" id="senderId" value='@User.FindFirst(ClaimTypes.NameIdentifier)?.Value' />
        <input type="text" id="messageInput" placeholder="Type your message..." class="form-control" />
        <button type="submit" class="btn btn-primary mt-2">Send</button>
            </form> *@
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const senderIdInput = document.getElementById("senderId");
        const loggedInUserId = "@(User.Identity.IsAuthenticated ? @User.FindFirst(ClaimTypes.NameIdentifier)?.Value : "")";
        console.log("Set senderIdInput.value to:", senderIdInput.value);


        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR connected");
            } catch (err) {
                console.error("Connection failed, retrying in 5s", err);
                setTimeout(startConnection, 5000);
            }
        }

        async function prepareChat(homeId) {
            try {
                const res = await fetch(`/api/conversations/for-home/${homeId}`);
                const data = await res.json();

                document.getElementById("conversationId").value = data.conversationId;

                

                if (!senderIdInput.value) {
                    senderIdInput.value = "@User.FindFirst("nameidentifier")?.Value";
                }
                
                document.getElementById("chatBox").style.display = "block";
            } catch (err) {
                console.error("Failed to fetch conversationId:", err);
            }
        }

        function getMessageStatusText(status) {
            switch (status) {
                case 0: return "Sent";
                case 1: return "Delivered";
                case 2: return "Read";
                default: return "Unknown";
            }
        }

        document.getElementById("openChatBtn").addEventListener("click", async () => {
            await prepareChat("@Model.Id");
        });

        document.getElementById("closeChatBtn").addEventListener("click", () => {
            document.getElementById("chatBox").style.display = "none";
        });

        function sendMessage() {
            const msg = document.getElementById("messageInput").value;
            const senderId = document.getElementById("senderId")?.value;
            const conversationId = document.getElementById("conversationId")?.value;
            console.log("DEBUG - Message:", msg);
            console.log("DEBUG - SenderId:", senderId);
            console.log("DEBUG - ConversationId:", conversationId);
            if (!msg || !senderId || !conversationId) {
                console.error("Missing fields for message sending.");
                return;
            }

            const tempId = "msg_" + Date.now();

            const messageDto = {
                conversationId: conversationId,
                senderId: senderId,
                content: msg,
                sentAt: new Date().toISOString(),
                status: 0
            };

            
            messageDto.tempId = tempId;


            const li = document.createElement("div");
            li.id = tempId;
            li.innerHTML = `<strong>You:</strong> ${msg} <span class="status-text" style="font-size:0.8em; color: gray;">[Sending...]</span>`;
            document.getElementById("messagesList").appendChild(li);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;


            connection.invoke("SendMessage", messageDto)
                .then(() => console.log("Message sent"))
                .catch(err => console.error("SignalR SendMessage failed:", err));

            document.getElementById("messageInput").value = "";

            connection.on("ReceiveMessage", (user, message) => {
                const currentUserId = document.getElementById("senderId").value;
                const isSelf = currentUserId === userId;

                if (isSelf) {
                    const existingMsg = [...document.getElementById("messagesList").children]
                        .reverse()
                        .find(el => el.textContent.includes(message.content));

                    if (existingMsg) {
                        const statusEl = existingMsg.querySelector(".status-text");
                        if (statusEl) {
                            statusEl.textContent = `[${getMessageStatusText(message.status)}]`;
                        }
                        return;
                    }
                }
                const li = document.createElement("div");
                li.innerHTML = `<strong>${isSelf ? "You" : "Dealer"}:</strong> ${message.content} <span class="status-text" style="font-size: 0.8em; color: gray;">[${getMessageStatusText(message.status)}]</span>`;
                const list = document.getElementById("messagesList");
                list.appendChild(li);
                list.scrollTop = list.scrollHeight;
            });
            };
        

       
       

        

        //  document.getElementById("sendMessageForm").addEventListener("submit", function (e) {
        //     e.preventDefault();

        //     const messageDto = {
        //         conversationId: document.getElementById("conversationId").value,
        //         content: document.getElementById("messageInput").value,
        //         senderId: document.getElementById("senderId").value
        //     };

        //     connection.invoke("SendMessage", messageDto).then(() => console.log("Message sent"))
        //         .catch(function (err) {
        //             console.error("SendMessage error:", err.toString());
        //         });

        //     document.getElementById("messageInput").value = "";
        // });



        startConnection();
    </script>
}
