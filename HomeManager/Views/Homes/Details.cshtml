@using System.Security.Claims
@model HomeManager.Data.Data.ViewModels.HomeDetailsViewModel
<h2>@Model.Home.HomeName</h2>
<p>@Model.Home.HomeDescription</p>
<p>Location: @Model.Home.HomeLocation</p>
<style>
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 0;
        right: 20px;
        width: 300px;
        background: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0,0,0,.3);
        z-index: 1000;
        border-radius: 10px;
    }

    .chat-header {
        padding: 10px;
        background: #007bff;
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

    .chat-body {
        height: 200px;
        padding: 10px;
        background: #f9f9f9;
    }

    .chat-footer {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        gap: 5px;
    }

        .chat-footer input {
            flex: 1;
            padding: 5px;
        }

        .chat-footer button {
            padding: 5px 10px;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }

    .fixed-image {
        width: 100%;
        height: 200px; 
        object-fit: cover;
        border: 2px solid #ddd; 
        border-radius: 8px; 
        padding: 5px;
    }
</style>
<!-- Embed Google Maps -->
<iframe
    width="600"
    height="450"
    style="border:0"
    loading="lazy"
    allowfullscreen
    referrerpolicy="no-referrer-when-downgrade"
    src="https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=@Model.Home.HomeLocation">
</iframe>
<div class="row mt-4">
    @if (Model.Home.Images?.Any() == true)
    {
        foreach (var image in Model.Home.Images)
        {
            <div class="col-md-4 mb-3">
                <img src="@image.FilePath" class="img-fluid fixed-image rounded shadow-sm" alt="Home Image" />
            </div>
        }
    }
    else
    {
        <p>No images available for this home.</p>
    }
</div>
<p>User ID Test: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
<p>Is Authenticated: @User.Identity.IsAuthenticated</p>
<p>Debug ConversationId: @if (Model.Conversation != null)
    {
    <p> @Model.Conversation.Id</p>
    }
    else
    {
    <p>No conversation found.</p>
    } </p>
<button id="openChatBtn" class="btn btn-primary mt-3">Ask the Dealer</button>
<div id="chatSection">
    
    <div id="chatBox" class="chat-popup">
        <div class="chat-header">
            <span>Chat with Dealer</span>
            <p>Debug UserId: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>

            <button id="closeChatBtn" class="close-btn">&times;</button>
        </div>

        <div class="chat-body" id="messagesList" style="overflow-y:auto;"></div>
        <div class="chat-footer">
            <br />
            
            <input type="text" id="messageInput" placeholder="Type a message..." />
            <input type="hidden" id="senderId" value='@User.FindFirst(ClaimTypes.NameIdentifier)?.Value' />
            <input type="hidden" id="conversationId" />
            

            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR connected");
            } catch (err) {
                console.error("Connection failed, retrying in 5s", err);
                setTimeout(startConnection, 5000);
            }
        }
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const currentUserId = "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
        const senderIdInput = document.getElementById("senderId");
        if (senderIdInput) {
            senderIdInput.value = currentUserId;
        }

        async function prepareChat(homeId) {
            const res = await fetch(`/api/conversations/for-home/${homeId}`, {
                credentials: 'include'
            });

            if (!res.ok) {
                const errorText = await res.text();
                alert("Error: " + errorText);
                return;
            }

            const data = await res.json();
            const conversationId = data.conversationId;
            const messagesRes = await fetch(`/Conversation/GetMessages?conversationId=${conversationId}`);

            if (!messagesRes.ok) {
                const errorText = await messagesRes.text();
                console.error("Failed to get messages:", errorText);
                return;
            }

            let messages;
            try {
                messages = await messagesRes.json();
            } catch (err) {
                console.error("Failed to parse JSON:", err);
                return;
            }

            if (!Array.isArray(messages)) {
                console.error("Expected array of messages but got:", messages);
                return;
            }

            document.getElementById("conversationId").value = conversationId;

            if (connection.state === "Connected") {
                try {
                    await connection.invoke("JoinConversationGroup", conversationId);
                    console.log("Joined SignalR group for conversation:", conversationId);
                } catch (err) {
                    console.error("Failed to join SignalR group:", err);
                }
            }

            const list = document.getElementById("messagesList");
            list.innerHTML = "";

            

            document.getElementById("chatBox").style.display = "block";

            messages.forEach(msg => {
                const div = document.createElement("div");
                const isSelf = msg.senderId === currentUserId;

               
                const status = msg.status ?? msg.messageStatus ?? 0;

                div.innerHTML = `<strong>${isSelf ? "You" : "Dealer"}:</strong> ${msg.content} <span class="status-text" style="font-size:0.8em; color: gray;">[${getMessageStatusText(status)}]</span>`;
                list.appendChild(div);
            });
        }

        function getMessageStatusText(messageStatus) {
            const num = parseInt(messageStatus ?? 0);

            switch (num) {
                case 0: return "Pending";
                case 1: return "Sent";
                case 2: return "Delivered";
                case 3: return "Seen";
                case 4: return "Failed";
                default: return `Unknown (${messageStatus})`;
            }
        }
        

        document.getElementById("openChatBtn").addEventListener("click", async () => {
            await prepareChat("@Model.Home.Id");
        });

        document.getElementById("closeChatBtn").addEventListener("click", () => {
            document.getElementById("chatBox").style.display = "none";
        });

        function sendMessage() {
            const msg = document.getElementById("messageInput").value;
            const conversationId = document.getElementById("conversationId")?.value;

            if (!msg || !conversationId || !currentUserId) {
                console.error("Missing fields for message sending.");
                return;
            }

            const tempId = "msg_" + Date.now();

            const messageDto = {
                conversationId: conversationId,
                senderId: currentUserId,
                content: msg,
                sentAt: new Date().toISOString(),
                status: 0,
                tempId: tempId
            };

            const li = document.createElement("div");
            li.id = tempId;
            li.dataset.content = msg;
            li.dataset.temp = "true";
            li.id = tempId;
            li.dataset.content = msg;
            li.dataset.temp = "true";
            li.innerHTML = `<strong>You:</strong> ${msg} <span class="status-text status-text-${tempId}" style="font-size:0.8em; color: gray;">[${getMessageStatusText(0)}]</span>`;
            document.getElementById("messagesList").appendChild(li);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;

            connection.invoke("SendMessage", messageDto)
                .then(() => console.log("Message sent"))
                .catch(err => console.error("SignalR SendMessage failed:", err));

            document.getElementById("messageInput").value = "";
        }

        connection.on("ReceiveMessage", (message) => {
            const isSelf = message.senderId === currentUserId;
            console.log("Message Received");
            if (isSelf && message.tempId) {
                const tempEl = document.getElementById(message.tempId);

                if (tempEl) {
                    const statusEl = tempEl.querySelector("span.status-text");
                    if (statusEl) {
                        statusEl.className = `status-text status-text-${message.messageId}`;
                        statusEl.textContent = `[${getMessageStatusText(message.messageStatus)}]`;
                    }

                    tempEl.dataset.temp = "false";
                    tempEl.id = message.messageId;
                    return;
                }
            }
            connection.onreconnected(async () => {
                const conversationId = document.getElementById("conversationId")?.value;
                if (conversationId) {
                    try {
                        await connection.invoke("JoinConversationGroup", conversationId);
                        console.log("Re-joined group after reconnect:", conversationId);
                    } catch (err) {
                        console.error("Failed to re-join group:", err);
                    }
                }
            });

            const li = document.createElement("div");
            li.innerHTML = `
                <strong>${isSelf ? "You" : "Dealer"}:</strong> ${message.content}
                <span class="status-text status-text-${message.messageId}" style="font-size: 0.8em; color: gray;">[${getMessageStatusText(message.status)}]</span>
            `;
            document.getElementById("messagesList").appendChild(li);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;
        });

        startConnection();

       
    </script>
}
