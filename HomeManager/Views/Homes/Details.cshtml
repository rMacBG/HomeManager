@using System.Security.Claims
@model HomeManager.Data.Data.ViewModels.HomeDetailsViewModel

<h2>@Model.Home.HomeName</h2>
<p>@Model.Home.HomeDescription</p>
<p>Location: @Model.Home.HomeLocation</p>
<style>
    .chat-popup {
        display: none;
        position: fixed;
        bottom: 0;
        right: 20px;
        width: 300px;
        background: white;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0,0,0,.3);
        z-index: 1000;
        border-radius: 10px;
    }

    .chat-header {
        padding: 10px;
        background: #007bff;
        color: white;
        font-weight: bold;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-radius: 10px 10px 0 0;
    }

    .chat-body {
        height: 200px;
        padding: 10px;
        background: #f9f9f9;
    }

    .chat-footer {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
        gap: 5px;
    }

        .chat-footer input {
            flex: 1;
            padding: 5px;
        }

        .chat-footer button {
            padding: 5px 10px;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
    }

    .fixed-image {
        width: 100%;
        height: 200px; 
        object-fit: cover;
        border: 2px solid #ddd; 
        border-radius: 8px; 
        padding: 5px;
    }

    .message {
        margin: 10px;
        display: flex;
    }

        .message.self {
            justify-content: flex-end;
        }

        
        .message.other {
            justify-content: flex-start;
        }

   
        max-width: 70%;
        padding: 10px;
        border-radius: 8px;
        background-color: #f1f0f0;
        position: relative;
    }

   
    .message.self .message-bubble {
        background-color: #4aef0a;
    }

   
    .message-author {
        font-weight: bold;
        margin-bottom: 3px;
    }

   
    .message-content {
        margin-bottom: 2px;
    }

    .message-status {
        font-size: 0.8em;
        color: gray;
        text-align: right;
    }
</style>
<!-- Embed Google Maps -->
<iframe
    width="600"
    height="450"
    style="border:0"
    loading="lazy"
    allowfullscreen
    referrerpolicy="no-referrer-when-downgrade"
    src="https://www.google.com/maps/embed/v1/place?key=YOUR_GOOGLE_MAPS_API_KEY&q=@Model.Home.HomeLocation">
</iframe>
<div class="row mt-4">
    @if (Model.Home.Images?.Any() == true)
    {
        foreach (var image in Model.Home.Images)
        {
            <div class="col-md-4 mb-3">
                <img src="@image.FilePath" class="img-fluid fixed-image rounded shadow-sm" alt="Home Image" />
            </div>
        }
    }
    else
    {
        <p>No images available for this home.</p>
    }
</div>
<p>User ID Test: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>
<p>Is Authenticated: @User.Identity.IsAuthenticated</p>
<p>Debug ConversationId: @if (Model.Conversation != null)
    {
    <p> @Model.Conversation.Id</p>
    }
    else
    {
    <p>No conversation found.</p>
    } </p>
@await Html.PartialAsync("_ChatBox")
<div id="chatBoxContainer"></div>
<button id="openChatBtn" data-home-id="@Model.Home.Id" class="btn btn-primary mt-3">Ask the Dealer</button>
<button id="closeChatBtn" class="btn btn-secondary mt-3">Close Chat</button>



@section Scripts {
     @* <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script> -->
    <script>
        window.onload = function () {
            const openChatBtn = document.getElementById("openChatBtn");
            if (openChatBtn) {
                openChatBtn.addEventListener("click", async () => {
                    console.log("Click fired, waiting for prepareChat...");

                    
                    const waitForPrepareChat = new Promise((resolve, reject) => {
                        let retries = 0;
                        const interval = setInterval(() => {
                            if (typeof window.prepareChat === "function") {
                                clearInterval(interval);
                                resolve();
                            } else if (++retries > 20) {
                                clearInterval(interval);
                                reject("prepareChat not available");
                            }
                        }, 100);
                    });

                    try {
                        await waitForPrepareChat;
                        await window.prepareChat("@Model.Home.Id");
                    } catch (err) {
                        console.error("Error calling prepareChat:", err);
                    }
                });
            } else {
                console.error("openChatBtn element not found.");
            }

            const closeChatBtn = document.getElementById("closeChatBtn");
            if (closeChatBtn) {
                closeChatBtn.addEventListener("click", () => {
                    const chatPopup = document.getElementById("chatPopup");
                    if (chatPopup) {
                        chatPopup.style.display = "none";
                    } else {
                        console.warn("chatPopup not found.");
                    }
                });
            } else {
                console.error("closeChatBtn element not found.");
            }
        };
    </script> *@

    <script>
    document.getElementById("openChatBtn").addEventListener("click", function () {
        const homeId = this.getAttribute("data-home-id");
        fetch(`/Homes/ChatBoxPartial?homeId=${homeId}`)
            .then(response => {
                if (!response.ok) throw new Error("Failed to load chat box.");
                return response.text();
            })
            .then(html => {
                document.getElementById("chatBoxContainer").innerHTML = html;
                
            })
            .catch(err => {
                alert("Could not load chat: " + err);
            });
    });
</script>
}



    @* <div id="chatSection">

    <div id="chatBox" class="chat-popup">
        <div class="chat-header">
            <span>Chat with Dealer</span>
            <p>Debug UserId: @User.FindFirst(ClaimTypes.NameIdentifier)?.Value</p>

            <button id="closeChatBtn" class="close-btn">&times;</button>
        </div>

        <div class="chat-body" id="messagesList" style="overflow-y:auto;"></div>
        <div class="chat-footer">
            <br />

            <input type="text" id="messageInput" placeholder="Type a message..." />
            <input type="hidden" id="senderId" value='@User.FindFirst(ClaimTypes.NameIdentifier)?.Value' />
            <input type="hidden" id="conversationId" />


            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
</div> *@
   @*  <script>
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR connected");
            } catch (err) {
                console.error("Connection failed, retrying in 5s", err);
                setTimeout(startConnection, 5000);
            }
        }
        let connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/chat")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        const currentUserId = "@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value";
        const senderIdInput = document.getElementById("senderId");
        if (senderIdInput) {
            senderIdInput.value = currentUserId;
        }

        async function prepareChat(homeId) {
           
            const res = await fetch(`/Chat/ForHome/${homeId}`, {
                credentials: 'include'
            });

            if (!res.ok) {
                const errorText = await res.text();
                alert("Error: " + errorText);
                return;
            }

            const data = await res.json();
            const conversationId = data.conversationId;

            const messagesRes = await fetch(`/Chat/Messages?conversationId=${conversationId}`);

            if (!messagesRes.ok) {
                const errorText = await messagesRes.text();
                console.error("Failed to get messages:", errorText);
                return;
            }

            let messages;
            try {
                messages = await messagesRes.json();
            } catch (err) {
                console.error("Failed to parse JSON:", err);
                return;
            }

            if (!Array.isArray(messages)) {
                console.error("Expected array of messages but got:", messages);
                return;
            }

            document.getElementById("conversationId").value = conversationId;

            if (connection.state === "Connected") {
                try {
                    // Ensure you use the same method name as defined in your hub.
                    await connection.invoke("JoinConversationGroup", conversationId);
                    console.log("Joined SignalR group for conversation:", conversationId);
                } catch (err) {
                    console.error("Failed to join SignalR group:", err);
                }
            }

            const list = document.getElementById("messagesList");
            list.innerHTML = "";
            document.getElementById("chatBox").style.display = "block";

            messages.forEach(msg => {
                const isSelf = msg.senderId === currentUserId;
                const li = document.createElement("div");
                li.classList.add("message", isSelf ? "self" : "other");

                const displayName = isSelf ? "You" : (msg.senderName ? msg.senderName : "Dealer");

                li.innerHTML = `
                <div class="message-bubble">
                    <div class="message-author">${displayName}:</div>
                    <div class="message-content">${msg.content}</div>
                    <div class="message-status">[${getMessageStatusText(msg.status)}]</div>
                </div>
            `;
                document.getElementById("messagesList").appendChild(li);
            });

            await connection.invoke("MarkAsSeen", conversationId);
        }

        function getMessageStatusText(messageStatus) {
            const num = parseInt(messageStatus ?? 0);

            switch (num) {
                case 0: return "Pending";
                case 1: return "Sent";
                case 2: return "Delivered";
                case 3: return "Seen";
                case 4: return "Failed";
                default: return `Unknown (${messageStatus})`;
            }
        }
        

        document.getElementById("openChatBtn").addEventListener("click", async () => {
            await prepareChat("@Model.Home.Id");
        });

        document.getElementById("closeChatBtn").addEventListener("click", () => {
            document.getElementById("chatBox").style.display = "none";
        });

        function sendMessage() {
            const msg = document.getElementById("messageInput").value;
            const conversationId = document.getElementById("conversationId")?.value;

            if (!msg || !conversationId || !currentUserId) {
                console.error("Missing fields for message sending.");
                return;
            }

            const tempId = "msg_" + Date.now();

            const messageDto = {
                conversationId: conversationId,
                senderId: currentUserId,
                content: msg,
                sentAt: new Date().toISOString(),
                status: 0,
                tempId: tempId
            };

            const li = document.createElement("div");
            li.id = tempId;
            li.dataset.content = msg;
            li.dataset.temp = "true";
            li.innerHTML = `<strong>You:</strong> ${msg} <span class="status-text status-text-${tempId}" style="font-size:0.8em; color: gray;">[${getMessageStatusText(0)}]</span>`;
            document.getElementById("messagesList").appendChild(li);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;

            connection.invoke("SendMessage", messageDto)
                .then(() => console.log("Message sent"))
                .catch(err => console.error("SignalR SendMessage failed:", err));

            document.getElementById("messageInput").value = "";
        }

        connection.on("ReceiveMessage", async (message) => {
            const isSelf = message.senderId === currentUserId;
            const li = document.createElement("div");
            console.log("Message Received");
            li.classList.add("message", isSelf ? "self" : "other");
            const displayName = isSelf ? "You" : (message.senderName ? message.senderName : "Dealer");
            if (isSelf && message.tempId) {
                const tempEl = document.getElementById(message.tempId);

                if (tempEl) {
                    const statusEl = tempEl.querySelector("span.status-text");
                    if (statusEl) {
                        statusEl.className = `status-text status-text-${message.messageId}`;
                        statusEl.textContent = `[${getMessageStatusText(message.messageStatus)}]`;
                    }

                    tempEl.dataset.temp = "false";
                    tempEl.id = message.messageId;
                    return;
                }
            }
            
            

            li.innerHTML = `
                        <div class="message-bubble">
                            <div class="message-author">${displayName}:</div>
                            <div class="message-content">${message.content}</div>
                            <div class="message-status">[${getMessageStatusText(isSelf ? message.status : message.status)}]</div>
                        </div>
                    `;
            document.getElementById("messagesList").appendChild(li);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;

            if (!isSelf) {
                try {
                    await connection.invoke("MarkAsDelivered", message.messageId);
                } catch (err) {
                    console.error("Failed to mark as delivered", err);
                }
            }
        });

        connection.on("ReceiveMessageStatusUpdate", (data) => {
            const statusEl = document.querySelector(`.status-text-${data.messageId}`);
            if (statusEl) {
                statusEl.textContent = `[${getMessageStatusText(data.status)}]`;
            }
        });

        connection.onreconnected(async () => {
            const conversationId = document.getElementById("conversationId")?.value;
            if (conversationId) {
                try {
                    await connection.invoke("JoinConversationGroup", conversationId);
                    console.log("Re-joined group after reconnect:", conversationId);
                } catch (err) {
                    console.error("Failed to re-join group:", err);
                }
            }
        });

        startConnection();

       
    </script> *@ 

